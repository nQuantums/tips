<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Linq.Expressions;
using DbCode.Query;
using DbCode.Internal;

namespace DbCode {
	public partial class Sql {
		/// <summary>
		/// <see cref="IDbCodeCommand"/>に対して実行するアクションをビルドする
		/// </summary>
		/// <returns>アクションコマンド</returns>
		public ActionCmd BuildAction() {
			return new ActionCmd(this.Build());
		}

		/// <summary>
		/// <see cref="IDbCodeCommand"/>に対して実行可能な関数をビルドする
		/// </summary>
		/// <typeparam name="TResult">列挙するレコードの型</typeparam>
		/// <returns>関数コマンド</returns>
		public FuncCmd<TResult> BuildFunc<TResult>() {
			return new FuncCmd<TResult>(this.Build(), this.Environment.CreateRecordReader<TResult>(null));
		}

		/// <summary>
		/// <see cref="IDbCodeCommand"/>に対して実行可能な関数をビルドする
		/// </summary>
		/// <param name="select">SELECT句ノード、これにより列挙するレコード型が推論される</param>
		/// <typeparam name="TResult">列挙するレコードの型</typeparam>
		/// <returns>実行可能SQL</returns>
		public FuncCmd<TResult> BuildFuncFromSelect<TResult>(ISelect<TResult> @select) {
			return new FuncCmd<TResult>(this.Build(), this.Environment.CreateRecordReader<TResult>((from c in @select.ColumnMap select c.Property).ToArray()));
		}
<#
for (int n = 1; n <= 10; n++) {
	var tparams = string.Join(", ", from i in Enumerable.Range(1, n) select "T" + i);
	var tparamArgs = string.Join(", ", from i in Enumerable.Range(1, n) select "Argument" + " arg" + i);
	var assignExprs = string.Join(",\n\t\t\t\t", from i in Enumerable.Range(1, n) select string.Format("Expression.Assign(Expression.Property(Expression.TypeAs(Expression.Property(Expression.ArrayIndex(paramsExpr, Expression.Constant(commandable.IndexOfArgument(arg{0}))), piPrmValue), typeof(Argument)), piArgValue), Expression.Convert(arg{0}Expr, typeof(object)))", i));
	var paramExprs = string.Join(", ", from i in Enumerable.Range(1, n) select "arg" + i + "Expr");

#>

		/// <summary>
		/// <see cref="IDbCodeCommand"/>に対して実行するアクションをビルドする
		/// </summary>
<#
	for (int i = 1; i <= n; i++) {#>
		/// <param name="arg<#=i#>">引数<#=i#></param>
<#	}#>
<#
	for (int i = 1; i <= n; i++) {#>
		/// <typeparam name="T<#=i#>">引数<#=i#>の型</typeparam>
<#	}#>
		/// <returns>実行可能SQL</returns>
		public ActionCmd<<#=tparams#>> BuildAction<<#=tparams#>>(<#=tparamArgs#>) {
			var commandable = this.Build();
			var piPrmValue = typeof(Parameter).GetProperty("Value");
			var piArgValue = typeof(Argument).GetProperty("Value");
			var paramsExpr = Expression.Parameter(typeof(Parameter[]));
<#
	for (int i = 1; i <= n; i++) {#>
			var arg<#=i#>Expr = Expression.Parameter(typeof(T<#=i#>));
<#	}#>
			var blockExpr = Expression.Block(
				<#=assignExprs#>
			);
			return new ActionCmd<<#=tparams#>>(commandable, Expression.Lambda<Action<Parameter[], <#=tparams#>>>(blockExpr, paramsExpr, <#=paramExprs#>).Compile());
		}

		/// <summary>
		/// <see cref="IDbCodeCommand"/>に対して実行可能な関数をビルドする
		/// </summary>
<#
	for (int i = 1; i <= n; i++) {#>
		/// <param name="arg<#=i#>">引数<#=i#></param>
<#	}#>
<#
	for (int i = 1; i <= n; i++) {#>
		/// <typeparam name="T<#=i#>">引数<#=i#>の型</typeparam>
<#	}#>
		/// <typeparam name="TResult">列挙するレコードの型</typeparam>
		/// <returns>実行可能SQL</returns>
		public FuncCmd<<#=tparams#>, TResult> BuildFunc<<#=tparams#>, TResult>(<#=tparamArgs#>) {
			var commandable = this.Build();
			var piPrmValue = typeof(Parameter).GetProperty("Value");
			var piArgValue = typeof(Argument).GetProperty("Value");
			var paramsExpr = Expression.Parameter(typeof(Parameter[]));
<#
	for (int i = 1; i <= n; i++) {#>
			var arg<#=i#>Expr = Expression.Parameter(typeof(T<#=i#>));
<#	}#>
			var blockExpr = Expression.Block(
				<#=assignExprs#>
			);
			return new FuncCmd<<#=tparams#>, TResult>(commandable, this.Environment.CreateRecordReader<TResult>(null), Expression.Lambda<Action<Parameter[], <#=tparams#>>>(blockExpr, paramsExpr, <#=paramExprs#>).Compile());
		}

		/// <summary>
		/// <see cref="IDbCodeCommand"/>に対して実行可能な関数をビルドする
		/// </summary>
		/// <param name="select">SELECT句ノード、これにより列挙するレコード型が推論される</param>
<#
	for (int i = 1; i <= n; i++) {#>
		/// <param name="arg<#=i#>">引数<#=i#></param>
<#	}#>
<#
	for (int i = 1; i <= n; i++) {#>
		/// <typeparam name="T<#=i#>">引数<#=i#>の型</typeparam>
<#	}#>
		/// <typeparam name="TResult">列挙するレコードの型</typeparam>
		/// <returns>実行可能SQL</returns>
		public FuncCmd<<#=tparams#>, TResult> BuildFuncFromSelect<<#=tparams#>, TResult>(ISelect<TResult> select, <#=tparamArgs#>) {
			var commandable = this.Build();
			var piPrmValue = typeof(Parameter).GetProperty("Value");
			var piArgValue = typeof(Argument).GetProperty("Value");
			var paramsExpr = Expression.Parameter(typeof(Parameter[]));
<#
	for (int i = 1; i <= n; i++) {#>
			var arg<#=i#>Expr = Expression.Parameter(typeof(T<#=i#>));
<#	}#>
			var blockExpr = Expression.Block(
				<#=assignExprs#>
			);
			return new FuncCmd<<#=tparams#>, TResult>(commandable, this.Environment.CreateRecordReader<TResult>((from c in @select.ColumnMap select c.Property).ToArray()), Expression.Lambda<Action<Parameter[], <#=tparams#>>>(blockExpr, paramsExpr, <#=paramExprs#>).Compile());
		}
<#
}
#>
	}
}

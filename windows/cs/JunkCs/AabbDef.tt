<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.Csharp" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ assembly name="$(SolutionDir)\FT4\bin\Debug\FT4.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ import namespace="System.Runtime.Serialization.Json" #>
<#@ output extension="/" #>
<#
var defs = FT4.AabbDefines.FromJsonFile(Host.ResolvePath("AabbDef.json"));
defs.Generate(Path.GetDirectoryName(this.Host.TemplateFile), this.GenerationEnvironment, d => {
#>
using System;
using System.Xml.Serialization;
using System.Runtime.InteropServices;

using element = <#=d.FullType#>;
using vector = Jk.<#=d.VectorDefine.ClassName#>;
using volume = Jk.<#=d.ClassName#>;
using range = Jk.<#=d.RangeDefine.ClassName#>;

namespace Jk {
	/// <summary>
	/// 軸並行境界ボックス
	/// </summary>
	[XmlType("Jk.<#=d.ClassName#>")]
	[StructLayout(LayoutKind.Explicit, Pack = <#=d.ElementSize#>, Size = <#=d.FullSize#>)]
	[Serializable]
	public struct <#=d.ClassName#> : IJsonable {
<#=d.DefElems("\t\t")#>

		public <#=d.ClassName#>(<#=d.Args()#>) {
<#=d.ElementWise("\t\t\t_E = _e;")#>
		}

<#foreach(var ovd in d.OtherTypes) {#>
		public <#=d.ClassName#>(<#=ovd.ClassName#> v) {
<#=d.ElementWise("\t\t\t_E = new vector(v._E);")#>
		}
<#}#>

		public override bool Equals(object obj) {
			if (obj is volume)
				return (volume)obj == this;
			else
				return false;
		}

		public override int GetHashCode() {
<#=d.ElementWise(
	(i) => {
		var s = "(_E.GetHashCode()";
		var shift = i % 3;
		if(shift == 1)
			s += " << 2";
		else if(shift == 2)
			s += " >> 2";
		s += ")";
		return s;
	},
	delimiter: (i) => " ^ ",
	prefix: () => "\t\t\treturn ",
	terminator: () => ";")#>
		}

		public override string ToString() {
			return string.Concat("{ ", <#=d.ElementWise("\"\\\"_E\\\": \" + _E", ", \", \", ")#>, " }");
		}

		public string ToJsonString() {
			return this.ToString();
		}

		public bool IsValid {
			get {
				return vector.Zero <= Extents;
			}
		}

		public range Range {
			get {
				var ext = Extents;
				var c = Center;
				return new range(c - ext, c + ext);
			}
		}

		public vector Size {
			get {
				return Extents * 2;
			}
		}

		public element Perimeter {
			get {
				var size = Extents * 2;
				return 2 * size.Sum();
			}
		}

		public element VolumeAndEdgesLength {
			get {
				var s = Extents * 2;
				return s.Product() + s.Sum();
			}
		}

		public bool Contains(vector v) {
			v.SubSelf(Center);
			return <#=d.VectorDefine.ElementWise("Math.Abs(v._E) <= Extents._E", " && ")#>;
		}

		public bool Intersects(volume aabb) {
			var v = Center - aabb.Center;
			var extents = Extents;
			return <#=d.VectorDefine.ElementWise("Math.Abs(v._E) <= extents._E + aabb.Extents._E", " && ")#>;
		}

		static public bool operator ==(volume b1, volume b2) {
			return <#=d.ElementWise("b1._E == b2._E", " && ")#>;
		}

		static public bool operator !=(volume b1, volume b2) {
			return <#=d.ElementWise("b1._E != b2._E", " || ")#>;
		}

		static public volume operator +(volume b, vector v) {
			b.Center.AddSelf(v);
			return b;
		}

		static public volume operator +(vector v, volume b) {
			b.Center.AddSelf(v);
			return b;
		}

		static public volume operator -(volume b, vector v) {
			b.Center.SubSelf(v);
			return b;
		}
	}
}
<#}); #>